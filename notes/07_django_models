-----------------------------------------------------------
CHAPTER 7 - DJANGO MODELS
-----------------------------------------------------------

- The Migrations Workflow

    - Models serve as the building blocks of Django projects.  Once you have them, you can simplify the
        creation of other constructs like forms, class-based views, REST services, admin pages, etc.


    - Creating a Model
        
        from django.db import models

        class Store(models.Model):
            # id = models.AutoField(primary_key=True)    # Added by default, not required explicitly
            # objects = models.Manager()                 # Added by default, not required explicitly

            name = models.CharField(max_length=30)
            address = models.CharField(max_length=30)
            city = models.CharField(max_length=30)
            state = models.CharField(max_length=2)

            def __str__(self):
                return "%s (%s,%s)" % (self.name, self.city, self.state)


    - The 'id' field is a automatically incrementing integer.

      The 'objects' field is Django's default model manager, charged with managing all the query operations
        on the model.


    - Model Migration Workflow

        1. The workflow starts when you add or modify Django models in 'models.py'.  Note that our app must be added
             to 'INSTALLED_APPS' for migrations to run.

             INSTALLED_APPS = (
                 'django.contrib.admin',
                 'django.contrib.auth',
                 'django.contrib.contenttypes',
                 'django.contrib.sessions',
                 'django.contrib.messages',
                 'django.contrib.staticfiles',
                 'coffeehouse.stores',            
             )


        2. Once you have enough changes that you want to create a migration file.

           The migration files are stored in '/migrations/' subdirectory, inside an app, next to the 'models.py'
             file they track.  They have the <number_shortdescription> filename format.

             # Get migration for the 'stores' app only
             $ python manage.py makemigrations stores

             Migrations for 'stores':
               0001_initial.py:
                 - Create model Store


           The file has 'initial' in the name, because it is the first migration for a new 'models.py'.

           When you run 'makemigrations' without an app name, Django looks for any changes in any of the 'models.py'
             files in any of the apps in 'INSTALLED_APPS', and makes migrations for them.


        3. To preview the SQL statements before running them on the database,

             # See the sql for the migration
             $ python manage.py sqlmigrate stores 0001

             BEGIN;
             CREATE TABLE "stores_store" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, 
                                          "name" varchar(30) NOT NULL, 
                                          "address" varchar(30) NOT NULL, 
                                          "city" varchar(30) NOT NULL, 
                                          "state" varchar(2) NOT NULL);
             COMMIT;


        4. Now, we apply the migrations to the database:

            # Execute migrations
            $ python manage.py migrate stores

            Operations to perform:
              Apply all migrations: stores
            Running migrations:
              Applying stores.0001_initial... OK


        5. To keep track of the applied migrations:

            # Show migrations
            $ python manage.py showmigrations stores



- Django Model Data Types


    Data type    Django model type               Description                                      Database DDL                                                          
    -----------------------------------------------------------------------------------------------------------------------------
     
    Binary       models.BinaryField()            Creates a blob field to store binary data        [SQLite]
                                                   (e.g., images, audio or other multimedia       BLOB NOT NULL
                                                   objects).                                      
                                                                                                  [MySQL]
                                                                                                  longblob NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  bytea NOT NULL       

                                                                                                  [Oracle]
                                                                                                  BLOB NULL
                                                        

    Boolean      models.BooleanField()           Creates a Boolean field to store True/False      [SQLite]
                                                   (or 0/1) values.                               bool NOT NULL
                                                                                    
                                                                                                  [MySQL]
                                                                                                  bool NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  boolean NOT NULL

                                                                                                  [Oracle]
                                                                                                  NUMBER(1) NOT NULL 
                                                                                                  CHECK (“VAR” IN (0,1))

    Boolean      models.NullBooleanField()       Works just like BooleanField but also allows     [SQLite]
                                                   NULL values.                                   bool NULL

                                                                                                  [MySQL]
                                                                                                  bool NULL
    
                                                                                                  [PostgreSQL]
                                                                                                  boolean NULL
    
                                                                                                  [Oracle]
                                                                                                  NUMBER(1) NULL 
                                                                                                  CHECK ((“VAR” IN (0,1)) OR 
                                                                                                         (“VAR” IS NULL))
    
    Date/time    models.DateField()              Creates a date field to store dates.             [SQLite]
                                                                                                  date NOT NULL
    
                                                                                                  [MySQL]
                                                                                                  date NOT NULL
    
                                                                                                  [PostgreSQL]
                                                                                                  date NOT NULL
    
                                                                                                  [Oracle]
                                                                                                  DATE NOT NULL

    Date/time    models.TimeField()              Creates a time field to store times.             [SQLite]
                                                                                                  time NOT NULL
    
                                                                                                  [MySQL]
                                                                                                  time NOT NULL
    
                                                                                                  [PostgreSQL]
                                                                                                  time NOT NULL
    
                                                                                                  [Oracle]
                                                                                                  TIMESTAMP NOT NULL


    Date/time    models.DateTimeField()          Creates a datetime field to store dates with     [SQLite]
                                                   times.                                         datetime NOT NULL
    
                                                                                                  [MySQL]
                                                                                                  datetime NOT NULL
    
                                                                                                  [PostgreSQL]
                                                                                                  timestamp with time zone NOT NULL
    
                                                                                                  [Oracle]
                                                                                                  TIMESTAMP NOT NULL
    

    Date/time    models.DurationField()          Creates a field to store periods of time.        [SQLite]       
                                                                                                  bigint NOT NULL
    
                                                                                                  [MySQL]
                                                                                                  bigint NOT NULL
    
                                                                                                  [PostgreSQL]
                                                                                                  interval NOT NULL
    
                                                                                                  [Oracle]
                                                                                                  INTERVAL DAY(9) TO SECOND(6) NOT NULL


    Number       models.AutoField()              Creates an integer that autoincrements,          [SQLite]
                                                   primarily used for custom primary keys.        integer NOT NULL AUTOINCREMENT

                                                                                                  [MySQL]
                                                                                                  integer AUTO_INCREMENT NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  serial NOT NULL

                                                                                                  [Oracle]
                                                                                                  NUMBER(11) NOT NULL 
                                                                                                  & also creates a SEQUENCE and TRIGGER to 
                                                                                                  increase the field
    

    Number       models.BigIntegerField()        Create a big integer to fit numbers between      [SQLite]
                                                   -9223372036854775808 to 9223372036854775807.   bigint NOT NULL
                                                   This range may vary depending on the DB 
                                                   brand.                                         [MySQL]
                                                                                                  bigint NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  bigint NOT NULL

                                                                                                  [Oracle]
                                                                                                  NUMBER(19) NOT NULL


    Number       models.DecimalField(            Enforces a number have a maximum X digits and    [SQLite]
                   decimal_places=X,               Y decimal points. Creates a decimal field      decimal NOT NULL
                   max_digits=Y)                   to store decimal numbers. Note both X and Y 
                                                   arguments are required, where the X argument   [MySQL]
                                                   represents the maximum number of digits to     numeric(X, Y) NOT NULL
                                                   store and the Y argument represents the 
                                                   number of decimal places to store.             [PostgreSQL]
                                                                                                  numeric(X, Y) NOT NULL

                                                                                                  [Oracle]
                                                                                                  NUMBER(10, 3) NOT NULL
    

    Number       models.FloatField()             Creates a column to store floating-point         [SQLite]
                                                   numbers.                                       real NOT NULL

                                                                                                  [MySQL]
                                                                                                  double precision NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  double precision NOT NULL
    
                                                                                                  [Oracle]
                                                                                                  DOUBLE PRECISION NOT NULL
    

    Number       models.IntegerField()           Creates a column to store integer numbers.       [SQLite]
                                                                                                  integer NOT NULL

                                                                                                  [MySQL]
                                                                                                  integer NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  integer NOT NULL

                                                                                                  [Oracle]
                                                                                                  NUMBER(11) NOT NULL
    

    Number       models.PositiveIntegerField()   Enforces values from 0 to 2147483647. Works      [SQLite]
                                                   just like IntegerField but limits values       integer unsigned NOT NULL
                                                   to positive numbers.
                                                                                                  [MySQL]
                                                                                                  integer UNSIGNED NOT NULL
    
                                                                                                  [PostgreSQL]
                                                                                                  integer NOT NULL 
                                                                                                  CHECK (“VAR” >= 0)

                                                                                                  [Oracle]
                                                                                                  NUMBER(11) NOT NULL 
                                                                                                  CHECK (“VAR” >= 0)


    Number       models.                         Enforces values from 0 to 32767. Works           [SQLite]
                 PositiveSmallIntegerField()       just like IntegerField and the specialized     smallint unsigned NOT NULL
                                                   PositiveIntegerField but limits numbers to 
                                                   a smaller positive range.                      [MySQL]
                                                                                                  smallint UNSIGNED NOT NULL
    
                                                                                                  [PostgreSQL]
                                                                                                  smallint NOT NULL CHECK (“VAR” >= 0)

                                                                                                  [Oracle]
                                                                                                  NUMBER(11) NOT NULL CHECK (“VAR” >= 0)


    Number       options.SmallIntegerField()     Enforces a number is in the range from           [SQLite]
                                                   -32768 to 32767. Works just like               smallint NOT NULL
                                                   IntegerField but in a smaller integer 
                                                   range.                                         [MySQL]
                                                                                                  smallint NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  smallint NOT NULL

                                                                                                  [Oracle]
                                                                                                  NUMBER(11) NOT NULL


    Text         models.CharField(max_length=N)  Creates a text column, where the max_length      [SQLite]
                                                   argument is required to specify the            varchar(N) NOT NULL
                                                   maximum length in characters.
                                                                                                  [MySQL]
                                                                                                  varchar(50) NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  varchar(50) NOT NULL

                                                                                                  [Oracle]
                                                                                                  NVARCHAR2(50) NULL


    Text        models.TextField()               Creates a text field to store text.              [SQLite]
                                                                                                  text NOT NULL
    
                                                                                                  [MySQL]
                                                                                                  longtext NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  text NOT NULL

                                                                                                  [Oracle]
                                                                                                  NCLOB NULL


    Text            models.                       Enforces the string a CSV of integers.          [SQLite]
    (Specialized)   CommaSeparatedIntegerField(     Works just like CharField except Django       varchar(N) NOT NULL
                    max_length=50)                  enforces the string be a comma separated 
                                                    value of integers prior to interacting        [MySQL]
                                                    with the database (e.g., 3,54,54,664,65).     varchar(N) NOT NULL
    
                                                                                                  [PostgreSQL]
                                                                                                  varchar(N) NOT NULL

                                                                                                  [Oracle]
                                                                                                  NVARCHAR2(N) NULL


    Text            models.EmailField()          Enforces the text is a valid email with          [SQLite]
    (Specialized)                                  the internal Django EmailValidator to          varchar(254) NOT NULL
                                                   determine what is and isn't a valid. Works 
                                                   just like CharField defaulting to a            [MySQL]
                                                   max_length of 254 characters and also          varchar(254) NOT NULL
                                                   enforces the string is a valid email.
                                                                                                  [PostgreSQL]
                                                                                                  varchar(254) NOT NULL
    
                                                                                                  [Oracle]
                                                                                                  NVARCHAR2(254) NULL 


    Text            models.FileField()           Enforces and provides various utilities          [SQLite]
    (Specialized)                                  to handle files (e.g., opening/closing         varchar(100) NOT NULL
                                                   file, upload location,etc.). Works just 
                                                   like CharField defaulting to a max_length      [MySQL]
                                                   of 100 characters and also enforces the        varchar(100) NOT NULL
                                                   string is a valid file.
                                                                                                  [PostgreSQL]
                                                                                                  varchar(100) NOT NULL

                                                                                                  [Oracle]
                                                                                                  NVARCHAR2(100) NULL
    

    Text            models.FilePathField()       Enforces and provides various utilities to       [SQLite]
    (Specialized)                                  limit choices of filenames in certain          varchar(100) NOT NULL
                                                   filesystem directories. Works just like 
                                                   CharField defaulting to a max_length of 100    [MySQL]
                                                   characters and also enforces the string is     varchar(100) NOT NULL
                                                   a valid file in a filesystem directory.
                                                                                                  [PostgreSQL]
                                                                                                  varchar(100) NOT NULL

                                                                                                  [Oracle]
                                                                                                  NVARCHAR2(100) NULL


    Text            models.ImageField()          Enforces and provides various utilities to       [SQLite]
    (Specialized)                                  handle image files (e.g. getting the height    varchar(100) NOT NULL
                                                   & width). Works just like CharField and the 
                                                   specialized FileField defaulting to a          [MySQL]
                                                   max_length of 100 characters and also          varchar(100) NOT NULL
                                                   enforces the string is a valid image. Note 
                                                   this field requires the presence of the        [PostgreSQL]
                                                   Pillow Python library (e.g., pip install       varchar(100) NOT NULL
                                                   Pillow).
                                                                                                  [Oracle]
                                                                                                  NVARCHAR2(100) NULL



    Text            models.                     Enforces and provides various utilities to        [SQLite]
    (Specialized)     GenericIPAddressField()     only accept valid IPv4 or IPv6 addresses        char(39) NOT NULL
                                                  (e.g., 198.10.22.64 and 
                                                  FE80::0202:B3FF.:FE1E:8329, as well as          [MySQL]
                                                  utilities like unpack_ipv4 and protocol).       char(39) NOT NULL
                                                  Works just like CharField defaulting to a 
                                                  max_length of 39 characters and enforces        [PostgreSQL]
                                                  the string is a valid IP address.               inet NOT NULL

                                                                                                  [Oracle]
                                                                                                  VARCHAR2(39) NULL


    Text            models.SlugField()          Enforces a string is a slug string, which is      [SQLite]
    (Specialized)                                 a string that only contains letters, numbers,   varchar(50) NOT NULL
                                                  underscores or hyphens. Works just like 
                                                  CharField defaulting to a max_length of 50      [MySQL]
                                                  characters and ensure the provided string is    varchar(50) NOT NULL
                                                  a slug - a concept that's typically used to 
                                                  cleanse URL strings that contain spaces and     [PostgreSQL]
                                                  other potentially invalid character like        varchar(50) NOT NULL
                                                  letter with accents.
                                                                                                  [Oracle]
                                                                                                  NVARCHAR2(50) NULL


    Text            models.URLField()           Enforces the provided text value is a valid       [SQLite]
    (Specialized)                                 URL. Works just like CharField defaulting       varchar(200) NOT NULL
                                                  to a max_length of 200 characters and 
                                                  enforces the string is a valid URL.             [MySQL]
                                                                                                  varchar(200) NOT NULL

                                                                                                  [PostgreSQL]
                                                                                                  varchar(200) NOT NULL

                                                                                                  [Oracle]
                                                                                                  NVARCHAR2(200) NULL


    Text            models.UUIDField()       Enforces the provided text is a Universally          [SQLite]
    (Specialized)                              unique identifiers (UUID) Works just like          char(32) NOT NULL
                                               CharField defaulting to a max_length of 32 
                                               characters and enforces the value is a UUID.       [MySQL]
                                                                                                  char(32) NOT NULL
    
                                                                                                  [PostgreSQL]
                                                                                                  uuid NOT NULL

                                                                                                  [Oracle]
                                                                                                  VARCHAR2(32) NOT NULL



- Oracle NOT NULL

    For some of the field types, Oracle generates DB columns with the NULL constraint, while the
      other database types generate columns with NOT NULL.

    This is because Oracle differs from the other databases in that it treats empty strings
      as NULL.  If you have an Oracle column with a NOT NULL constraint, we won't be able to
      insert empty strings into it.

    This is a well-known Oracle quirk, and everyone has their own way of dealing with it.



- Data Enforcement Options

    - Limiting Values

        max_length
        min_value
        max_value
        max_digits
        decimal_places


    - Empty, Null and Not Null

        - By default, all Django model fields are assigned a NOT NULL restriction at the database level.
            To allow a field to be null, we use the 'null=True' option.

            IntegerField(null=True)


        - Django also supports the 'blank' option for forms.  By default, 'blank=False' for form fields.
            If you want to allow a field to be blank, use the 'blank=True' option.


    - Predetermined Values

        - The 'default' option is used to define a default with either a constant or a method call.

            def default_city():
                return 'San Diego'

            class Store(models.Model):
                state = models.CharField(max_length=2, default='CA')
                city = models.CharField(max_length=30, default=default_city)


        - The enforcement of default options is done entirely in Python.  The underlying DDL is unaware of
            any default values.


        - The 'auto_now' and 'auto_now_add' options are available for DateTime fields.

            # auto_now columns are updated every time a record is changed
            # auto_now_add columns are frozen for the lifetime of the record
            from datetime import date
            from django.utils import timezone
            
            class Store(models.Model):
                name = models.CharField(max_length=30)
                address = models.CharField(max_length=30)
                date = models.DateField(default=date.today)
                datetime = models.DateTimeField(default=timezone.now)

                date_lastupdated = models.DateField(auto_now=True)
                date_added = models.DateField(auto_now_add=True)
                timestamp_lastupdated = models.DateTimeField(auto_now=True)
                timestamp_added = models.DateTimeField(auto_now_add=True)


        - The 'choices' option is used to limit input to a predefined list of values.

            ITEM_SIZES = (
                          ('S','Small'),
                          ('M','Medium'),
                          ('L','Large'),
                          ('P','Portion'),
                         )

            class Menu(models.Model):
                name = models.CharField(max_length=30)

            class Item(models.Model):
                menu = models.ForeignKey(Menu, on_delete=models.CASCADE)
                name = models.CharField(max_length=30)
                description = models.CharField(max_length=100)
                size = models.CharField(choices=ITEM_SIZES,max_length=1)


    - Unique Values

        - The 'unique=True' is used to enforce a field to be unique across all records.  It is enforced at
            the database layer (ie with a DDL UNIQUE SQL constraint).

            CharField(max_length=30, unique=True)


        - To enforce uniqueness in a 'DateField' or 'DateTimeField', we can use the 'unique_for_date',
            'unique_for_month', and 'unique_for_year' options.

            name = models.CharField(max_length=30, unique_for_date='date_lastupdated')
            name = models.CharField(max_length=30, unique_for_month='date_lastupdated')
            name = models.CharField(max_length=30, unique_for_year='date_lastupdated')


    - Form Values

        - The 'editable' option determines whether a field should be added to a form.  By default,
            'editable=True'.


        - The 'help_text' option allows the inclusion of additional text alongside a form field.

            description = models.CharField(max_length=100,
                                           help_text="Ensure you provide some description of the ingredients")
            calories = models.IntegerField(help_text="Calorie count should reflect <b>size</b> of the item")


        - By default, the label generated for a field is a caitalized version of the field name.  To
            override this, the 'verbose_name' option is used.

            name = models.CharField(max_length=30, verbose_name='ITEM NAME')


        - We can add custom error messages to form fields by using the 'error_messages' attribute.


    - DDL Values

        - The 'db_column' option is used to control the name of the column.

            # Override the column name
            name = models.CharField(max_length=30, db_column='my custom name')


        - The 'db_index' option is used to control whether a column gets an index.

            # Generate an index for a field
            size = models.CharField(choices=ITEM_SIZES, max_length=1, db_index=True)

          If a field uses the 'unique=True' option, Django automatically creates an index for the field.
            If a field is a 'ForeignKey' data type, Django automatically creates an index for the field.
            To disable these, use 'db_index=False'.


        - In PostgreSQL or Oracle databases, it's possible to specify a tablespace for a field's index
            through the 'db_tablespace' option.


        - The 'primary_key' option allows you to define a primary key for a model.  If you don't define a
            primary key option, an 'id' primary key attribute is automatically created.


    - Built-in and Custom Validators

        - The 'validators' option allows more advanced validation logic througth built-in or custom
            methods.


            ITEM_SIZES = (
                        ('S','Small'),
                        ('M','Medium'),
                        ('L','Large'),
                        ('P','Portion'),
                        )
            
            # Import built-in validator
            from django.core.validators import MinLengthValidator
            
            # Create custom validator
            from django.core.exceptions import ValidationError
            
            # Custom validator must raise a 'ValidationError'
            def calorie_watcher(value):
                if value > 5000:
                    raise ValidationError(
                        ('Whoa! calories are %(value)s ? We try to serve healthy food, try something less than 5000!'),
                        params={'value': value},
                    )
                if value < 0:
                    raise ValidationError(
                        ('Strange calories are %(value)s ? This can\'t be, value must be greater than 0'),
                        params={'value': value},
                    )
            
            class Menu(models.Model):
                name = models.CharField(max_length=30)
            
            class Item(models.Model):
                menu = models.ForeignKey(Menu, on_delete=models.CASCADE)
                name = models.CharField(max_length=30,validators=[MinLengthValidator(5)])
                description = models.CharField(max_length=100)
                size = models.CharField(choices=ITEM_SIZES,max_length=1)
                calories = models.IntegerField(validators=[calorie_watcher])



- Model Methods

    - The 'save()' method creates or updates a record to a database.

        from coffeehouse.stores.models import Store
        
        store_corporate = Store(name = 'Corporate',
                                address = '624 Broadway',
                                city = 'San Diego',
                                state = 'CA',
                                email='corporate@coffeehouse.com')
        
        # No record id reference, so a create operation is made and the reference is 
        #   updated with id
        store_corporate.save()
        
        store_corporate.city='625 Broadway'
        
        # Record has id reference from prior save() call, so operation is update
        store_corporate.city='625 Broadway'
        store_corporate.save()


    - These are custom 'save()' arguments:

        # Used to force insertion and updating, rarely used
        force_insert
        force_update

        # Used to use a database other than the default from 'settings.py'
        using

        # Specify a list of fields to update
        update_fields

        # Used to control whether a transaction is committed, True by default
        commit


    - It is possible to override the 'save()' method with a custom implementation.

        class Store(models.Model):
            def save(self, *args, **kwargs):
                # Do custom logic
                # Now, call the default save
                super(Store, self).save(*args, **kwargs)


    - The 'delete()' method deletes a record.

        # Delete store record
        store_corporate.delete()

        # Delete arguments
        using
        keep_parents



- Validation Methods

    - Django model instance validation is that it's done on 2 layers: the database layer and the Django layer.


    - The 'clean_fields()' method runs the field validations in the Django layer

        class Store(models.Model):
            name = models.CharField(max_length=30)
            address = models.CharField(max_length=30,unique=True)
            city = models.CharField(max_length=30)
            state = models.CharField(max_length=2)
        
        # Create a model Store instance, that violates the max_length rule
        store_corporate = Store(name='This is a very long name for the Corporate store that exceeds the 30 character limit',
                                address='624 Broadway',
                                city='San Diego',
                                state='AZ',
                                email='corporate@coffeehouse.com')
        
        # No error yet
        
        # You could call save() and let the database reject the instance...
        # But you can also validate at the Django/Python level with the clean_fields() method
        store_corporate.clean_fields()
        Traceback (most recent call last):
            raise ValidationError(errors)
        ValidationError: {'name': [u'Ensure this value has at most 30 characters (it has 84).']}


    - The 'clean()' method can be overridden to add custom validations.  The 'validate_unique()' method is used to check
        a value for uniqueness in the app layer.  The 'full_clean()' method calls 'clean_fields()', 'clean()', and 
        'validate_unique()' methods.

        

- Data Loading Methods

- Custom Methods

- The Model 'manager' Field

- Model Metaclasses and Options

- Relationships in Django Models

- Django Model Transactions

- Django Model Migrations

- Django Model Database Tasks

- Django Model Initial Data Setup

- Django Model Signals

- Django Models Outside of 'models.py'

- Django Models andn Multiple Databases