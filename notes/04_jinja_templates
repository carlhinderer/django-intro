-----------------------------------------------------------
CHAPTER 4 - JINJA TEMPLATES
-----------------------------------------------------------

- Jinja Advantages and Disadvantages 

    - Advantages of Using Jinja

        1. Jinja compiles template source to Python byte code when it's first loaded, to the 
             template is only parsed once.  Jinja also supports ahead-of-time compilation.

        2. Jinja templates are very flexible in what they can contain, including macros and
             more Python-like constructs.

        3. Jinja templates are similar to Django templates.

        4. Jinja templates support asynchronous execution.


    - Disadvantages of Using Jinja

        5. Jinja has much fewer third-party packages, since Django templates have been around
             much longer.

        6. Jinja has some new concepts that require additional practice to understand.



- What Works the Same in Jinja and Django Templates

        - Variables and blocks
        - Conditionals and loops
        - Comments
        - Spacing and Special Characters



- What Works Differently in Jinja and Django Templates

    - Filters

        Although Jinja uses the pipe operator to apply filters to variables, Jinja filters are technically
          classified into filters and tests.  

          # In Django templates tests are filters
          {% variable | divisibleby: '5' %}

          # Jinja conditional syntax
          {% if variable is divisibleby(5) %}


    - Context Processors

        Context processors give Django templates access to sets of variables across every template in a project.
          In Jinja, this is achieved with 'global variables'.


    - No date elements

        Jinja doesn't have any out-of-the-box tags or filters to work with date and time.  For simple time
          formatting, we can just use the Python 'format' method.  For more complex formatting, we'll have to 
          write custom tags and filters.


    - The {% comment %} Tag Is Not Supported

        {# #} is used for both single and multi-line comments in Django.


    - The {% load %} Tag Is Not Supported

        The {% load %} tag is not necessarily in Jinja, because custom tags and filters are registered 
          globally and are automatically accessible to all Jinja templates.


    - Use {{ super() }} Instead of {{ block.super }}

        # Access contents of parent's template block in Django templates
        {{ block.super }}

        # Access contents of parent's template block in Jinja
        {{ super() }}


    - The {% csrf_token %} Tag Is Not Supported

        # Add csrf token in Django Templates
        {% csrf_token %}

        # Add csrf token in Jinja
        {{ csrf_input }}


    - The {% for %} is Different

        Jinja uses the same {% for %} syntax for loops, but the variables available in the loop context are 
          a bit different.
 

    - The {% empty %} Tag Is Not Supported

        The {% empty %} tag is not supported in loops.  Use {% else %} instead.


    - The {% groupby %} Tag Is Not Supported

        # groupby tag is used to rearrange dictionaries in Django templates
        {% groupby %}

        # groupby filter is used in Jinja
        {{ variable | groupby }}
 

    - The {% cycle %} Tag Is Not Supported

        # cycle tag is used to cycle over a list of values in Django templates
        {% cycle %}

        # 'loop.cycle' method available in for loops is used in Jinja instead
        loop.cycle


    - The {% lorem %} Tag Is Not Supported

        # lorem tag is used to generate random text in Django templates
        {% lorem %}

        # in Jinja the 'lipsum' function is used
        lipsum


    - A Few Other Tags Are Not Supported

        # Other tags not supported in Jinja
        {% static %}
        {% trans %}
        {% blocktrans %}
        {% url %}



- New Concepts and Features in Jinja vs Django Templates

    - More Built-in Filters and Tests and More Python-like Environment

        - Jinja templates offer a variety of built-in filters and tests (ie type-checking)
        - Access to complex data types like objects and dictionaries is much better (ie select and map)
        - More Python-like syntax


    - Global Functions

        - Jinja supports a series of global functions (ie Python 'range' function)


    - Flexible Tag Nesting, Conditionals, and References

        - Inline and conditional nesting of tags is supported in Jinja


    - Macros

        - Macros allow you to define function-like snippets with complex layouts that can be called from 
            any template


    - Flexible Variable Assignment in Templates

        - The {% set %} tag can be used to define variables that have scope until the end of the template
        - With Django templates, every variable has to be closed manually with {% with %} ... {% endwith %}


    - Line Statements

        - Line statements are an alternative to tag syntax.  

            Iterate with a tags:

            {% for item in items %}
              ...
            {% endfor %}


            Iterate with line statements:

            # for item in items
               ...
            # endfor



- Jinja Template Configuration in Django

    - First, we need to install the jinja core package.

        $ pip install Jinja2


    - Next, we need to configure Jinja in the 'settings.py'.

        import os
        BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
        
        TEMPLATES = [
            {
                'BACKEND':'django.template.backends.jinja2.Jinja2',
                'DIRS': ['%s/jinjatemplates/'% (PROJECT_DIR),],
                'APP_DIRS': True,
                },
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]



- Template Search Paths

    - The APP_DIRS variable permits the lookup of templates in a special app subdirectory named 'jinja2'.
        However, remember that the template search path is not aware of app namespaces.  

      For instance, if 2 apps both have an template named 'index.html', the one with the topmost declared
        app will always get rendered.


    - To get around this, it's often useful to declare a folder with the app name inside of the 'jinja2'
        directory to avoid name clashes.

        + about (app)
            + __init__.py
            + models.py
            + tests.py
            + views.py
            + jinja2
                + about
                    + index.html



- Auto-Escaping Behavior

    - Django enables Jinja template auto-escaping by default.  This has the sames advantages and drawbacks
        that auto-escaping always does.

      One one hand, this errs on the side of precaution and security, because it limits XSS scripting
        vulnerabilities.  On the other hand, it introduces extra processing in the template engine that
        can cause performance problems.  


    - To disable auto-escaping, use:

        'OPTIONS': {
            'autoescape': False
        }



- Auto-Reload Template Behavior and Caching

    - Out of the box, if DEGUG is set to True, Jinja will check to see whether a template's source has
        changed every time the template is requested.

      If DEBUG is set to False, it turns template-autoreloading off.  

      If we need to override this, we can set the 'auto_reload' parameter explicitly in 'OPTIONS'.


    - By default, the Jinja caches 400 templates at a time.

      To override this, we can set the 'cache_size' parameter explicitly in 'OPTIONS'.



- Invalid Template Variables

    - If DEBUG=True, and there is an invalid variable encountered in a template, the 
        'jinja2.DebugUndefined' class outputs the variable verbatim for rendering.


    - If DEBUG=False, and there is an invalid variable encountered in a template, the 
        'jinja2.Undefined' class outputs a blank space in the missing variable's place.


    - For testing purposes, we could have the server just render an HTTP 500 immediatedly if
        an invalid reference is found.

        # settings.py
        import jinja2

        'OPTIONS': {
            'undefined': jinja2.StrictUndefined
        }



- Template Loaders

    - Custome template loaders can be created for Jinja in advanced cases.



- Creating Reusable Jinja Templates

- Jinja Globals

- Jinja Built-In Tags

- Custom Filters and Tests in Jinja

- Jinja Extensions

- Jinja Policies
