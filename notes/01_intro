-----------------------------------------------------------
CHAPTER 1 - INTRO TO DJANGO
-----------------------------------------------------------

- Django was started in 2003 by Adrian Holovaty and Simon Willison at the 'Journal-World' newspaper
    in Lawrence, KS.  In 2005, they released the first public version of the framework.



- Design Principles

    1. DRY
    2. Explicit is Better Than Implicit
    3. Loosely Coupled Architecture



- Rails vs Django

    Rails has a lot of implicit behavior.  For instance, this example shows request parameters automatically
      being implicitly available to the controller, instance variables automatically being passed from
      controller to the view, and the correct view automatically being inferred from the method name.

      class StoresController < ApplicationController
        def show
          # Automatic access to request parameters
          @store = Store.find(params[:id])
          # Instance variable automatically available in view
          # Automatically uses the 'show' template
        end
      end


    By contast, each of these things must be explicitly declared in Django.

      def detail(request, store_id):
          store = Store.objects.get(id=store_id)
          # Instance variables must be passed explicitly
          # Explicit template must be assigned
          return render(request, 'store/detail.html', {'store': store})



- Starting a Django Project

    - To start a Django project, we use either the 'django-admin' executable or the 'django-admin.py'
        script.  After Django is installed, both of these should be accessible from anywhere in your
        system (since they are installed in '/usr/bin', 'usr/local/bin', etc.).  Both the executable
        and script do the exact same thing.


    - The 'django-admin' offers subcommands used extensively for daily work.  The 'startproject'
        subcommand creates a new project.

        # Create a new project called 'coffeehouse'
        $ django-admin startproject coffeehouse

        # Create a new project called 'sportstats'
        $ django-admin startproject sportstats


    - Here is the project structure for the newly created project:

        > coffeehouse
            - manage.py
            > coffeehouse
                - __init__.py
                - settings.py
                - urls.py
                - wsgi.py


        manage.py
          - Runs specific project tasks
          - Whereas 'django-admin.py' runs system-wide tasks, 'manage.py' runs project-specific tasks

        __init__.py
          - Python file that allows Python packages to be imported from directories where its present

        settings.py
          - Contains the config settings for the Django project

        urls.py
          - Contains URL patterns for the Django project

        wsgi.py
          - Contains WSGI config properties for the Django project
          - WSGI is the recommended approach to deploy Django applications in production


    - It's a best practice to rename the top-level base name so that it doesn't match the project directory,
        to avoid confusion.


    - To start the development web server:

        $ python manage.py runserver

      Then, navigate to:

        http://localhost:8000

      To start the development server on a different port:

        $ python manage.py runserver 8080

      To start the development server on a different address and port:

        $ python manage.py runserver 192.168.0.2:8888



- Database Setup

    - By default, new Django projects are set up to use SQLite.  Instead, we'll configure Postgres.

        # Get the sqlite development libraries
        $ sudo apt-get install libpq-dev

        # Log into postgres
        $ sudo su - postgres
        $ psql

        # Create new database
        > CREATE DATABASE coffeehouse;

        # Create new user account to access the database
        > CREATE USER djangouser WITH PASSWORD 'djangopw';

        # Grant rights on the database to user
        > GRANT ALL PRIVILEGES ON DATABASE coffeehouse TO djangouser;


    - Next, we'll install 'psycopg2' to add the Python Postgres adapter.

        $ pip install psycopg2


    - Next, we edit the 'settings.py' file.

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'coffeehouse',
                'USER': 'djangouser',
                'PASSWORD': 'djangopw',
                'HOST': 'localhost',
                'PORT': '5432'
            }
        }


    - Finally, we run the initial migrations.

        $ python manage.py migrate



- URLs, Templates, and Apps

    - URLs define the entry points for accessing content.  Templates define the end points that give form
        to the final content.  Apps serve as the middleware between urls and templates, altering or 
        adding content from a database or user interactions.


                             User Requests
                                  |
                                  v
                      URLs Layer (Routes Requests)
                           |                |
                           |                v
                  Static   |          Apps Layer (Modify/Enrich Content)  <--->  Database
                  Content  |                |
                           |                |
                           v                v
                        Templates Layer (Structure Content)


    - Note that the Apps layer can be bypassed if no dynamic content is needed.



- Creating URLs

    - First, we'll create a URL to create a custom home page.  The ^$ regex is used to match the home
        page.  

        # urls.py
        from django.conf.urls import url
        from django.contrib import admin
        from django.views.generic import TemplateView

        urlpatters = [
            url(r'^admin/', admin.site.urls),
            url(r'^$', TemplateView.as_view(template_name='homepage.html')),
        ]


    - Since the 'homepage.html' template doesn't exist yet, we will get an error.


    - Note that in Django 2, 'path' is becoming preferred over 'url', which will eventually be
        deprecated.  'path' has simpler, more readable syntax.  'url' is actually an aliax for 're_path'.

        # Comparison
        url(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive)
        path('articles/<int:year>/', views.year_archive)


    - To use 'path' for the homepage,

        path('', TemplateView.as_view(template_name='homepage.html'))



- Creating a Template

    - Here, we'll create a simple template.

        # coffeehouse-project/coffeehouse/templates/homepage.html
        <html>
            <body>
                <h4>Home page for Django</h4>
            </body>
        </html>

