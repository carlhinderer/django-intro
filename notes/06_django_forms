-----------------------------------------------------------
CHAPTER 6 - DJANGO FORMS
-----------------------------------------------------------

- Django Form Structure

    - Here is a stand-alone Django form class used to back a contact form:

        # forms.py in 'contact' app
        from django import forms

        class ContactForm(forms.Form):
            name = forms.CharField(required=False)
            email = forms.EmailField(label='Your email')
            comment = forms.CharField(widget=forms.TextArea)


    - Here is a view method to handle it:

        # views.py in 'contact' app
        from django.shortcuts import render
        from forms import ContactForm

        def contact(request):
            form = ContactForm()
            return render(request, 'about/contact.html', {'form': form})


    - We make the template 'about/contact.html'

        # contact.html
        {{ form.as_table }}


    - Here is the HTML that will be rendered:

        <tr>
          <th><label for="id_name">Name:</label></th>
          <td><input id="id_name" name="name" type="text" /></td>
        </tr>
        <tr>
          <th><label for="id_email">Your email:</label></th>
          <td><input id="id_email" required name="email" type="email" /></td>
        </tr>
        <tr>
          <th><label for="id_comment">Comment:</label></th>
          <td><textarea cols="40" id="id_comment" required name="comment" rows="10"></textarea></td>
        </tr>


      Note that the inner table tags are populated, but the enclosing <table> and <form action=''>
        are missing.



- Form Workflow

    1. Client sends GET request, and it's routed to 'views.py'

    2. The HTML form is delivered to the client

    3. Client sends POST form submit request, and it's routed to 'views.py'

    4. Form processing result is delivered to the client (success message, errors, or redirect)



- Functional Web Form Syntax for Django Forms

    - Here is a functional form with the enclosing tags:

        # about/contact.html
        <form method="POST">
            {% csrf_token %}
            <table>
                {% form.as_table %}
            </table>
            <input type='submit' value='Submit form'>
        </form>


    - Django forces you to create the <form> tag, since it's attributes dictate much of a web form's
        behavior.

      Note that we have omitted the 'action' attribute.  By default, it is set to use the same URL as
        the GET request that returned this form.  To use a different url, we set the 'action'
        maunally.

        action='/urltoprocessform/'


    - The {% csrf_token %} should be used on all POST requests submitted via POST and processed by 
        Django.



- Django View Method To Process Django Form

    - Here is the modified version of our view method:

        # views.py in 'contact' app
        from django.shortcuts import render
        from django.http import HttpResponseRedirect
        from .forms import ContactForm

        def contact(request):
            if request.method == 'POST':
                # POST, generate form data from the request
                form = ContactForm(request.POST)

                # Check if its valid
                if form.is_valid():
                    # Process data, insert into DB, generate email, etc.
                    # Redirect to a new url
                    return HttpResponseRedirect('/about/contact/thankyou')
            else:
                # GET request
                form = ContactForm()
            return render(request, 'about/contact.html', {'form': form})



- CSRF and Django

    - CSRF is a technique used to force users into executing unwanted actions on a web application.
        CSRF attacks rely mostly on social engineering and lax application security on a web
        application.  


    - This describes a CSRF scenario on a web application:

        1. Client authenticates with username and password

        2. HTML form is delivered to client

            <form>
                <input type='text' name='email'>
            </form>

        3. Cyber criminal publishes form with pre-filled values and intent to deceive

            <form>
                <input type='text' name='email' value='criminal@rogue.com'>
            </form>

        4. User clicks on fraud bait on social media, email, or web site.

        5. Forged form data is sent to the server, and is taken as valid since it was sent from an
             authenticated user's browser.  The client account's email is now 'criminal@rogue.com'.


    - To protect against CSRF attacks, we add a unique identifier to each web form.  It's unique
        to each user and has an expiration time, like a session identifier.  

      Only requests that pass back a matching CSRF token are considered valid and all other 
        requests are discarded.


    - The token generated looks like:

        <input type='hidden' name='csrfmiddlewaretoken' value='32_character_string'>


    - CSRF is enabled by default on all Django applications.  If we want to disable it application-wide,
        we can change a setting in the 'settings.py'.

      To disable it for a certain form, we can use the '@csrf_exempt' or '@csrf_protect' decorators
        on the view methods.


        # Bypass csrf enforcement
        @csrf_exempt
        def contact(request):
            ...

        # Enforce csrf when its disabled at the project level
        @csrf_protect
        def contact(request):
            ...



- Django Form Processing

- Accessing Form Values

- Validating Form Values

- Error Form Values

- Django Form Field Types

- Django Widgets

- Set Up the Layout for Django Forms in Templates

- Django Custom Form Fields and Widgets

- Django Advanced Form Processing

    - Partial Forms
    - AJAX
    - Files

- Django Formsets