--------------------------------------------------------------------
CHAPTER 3 - EXTENDING THE BLOG APPLICATION
--------------------------------------------------------------------

- Creating Custom Template Tags and Filters

    - Django provides these helper functions that allow you to create your own template tags in 
        an easy manner.

        1. 'simple_tag' = Processes the data and returns a string
        2. 'inclusion_tag' = Processes the data and returns a rendered template


    - Create a new directory for blog template tags:

        blog/
          __init__.py
          models.py
          ...
          templatetags/
            __init__.py
            blog_tags.py


    - Now, add the 'blog_tags.py':

        # blog/templatetags/blog_tags.py

        from django import template
        from ..models import Post
        
        register = template.Library()
        
        @register.simple_tag
        def total_posts():
            return Post.published.count()


    - In order to make custom template tags avaiable in templates, we have to load them.

        # templates/blog/base.html

        {% load blog_tags %}
        {% load static %}
        <!DOCTYPE html>
        ...

        # Add this to 'sidebar' section
        <p>This is my blog. I've written {% total_posts %} posts so far.</p>



- Creating an Inclusion Tag

    - Now, we'll create an inclusion tag, which can render a template with context variables
        returned by your template tag.

        # blog_tags.py

        @register.inclusion_tag('blog/post/latest_posts.html')
        def show_latest_posts(count=5):
            latest_posts = Post.published.order_by('-publish')[:count]
            return {'latest_posts': latest_posts}


    - Create a new template to show the latest posts:

        # blog/post/latest_posts.html
        <ul>
          {% for post in latest_posts %}
            <li>
              <a href="{{ post.get_absolute_url }}">{{ post.title }}</a>
            </li>
          {% endfor %}
        </ul>


    - And we can add the list of latest posts to our sidebar in 'base.html'.

        # templates/blog/base.html
        <h3>Latest Posts</h3>
        {% show_latest_posts 3 %}



- Creating a Template Tag with a Stored Result

    - Here, we'll create a tag to display the most commented posts.

        # blog_tags.py

        @register.simple_tag
        def get_most_commented_posts(count=5):
            return Post.published \
                       .annotate(total_comments=Count('comments')) \
                       .order_by('-total_comments')[:count]


      We:
        1. Build a QuerySet using the 'annotate()' function to aggregate the total
             number of comments for each post.

        2. We use the 'Count' aggregation to store the number of comments in the
             computed field in descending order.

        3. We provide a 'count' argument to limit the number of objects returned.


    - We'll add the most commented posts to the sidebar:

        # templates/blog/base.html
        # Add to sidebar

        <h3>Most commented posts</h3>
        {% get_most_commented_posts as most_commented_posts %}
        <ul>
        {% for post in most_commented_posts %}
          <li>
            <a href="{{ post.get_absolute_url }}">{{ post.title }}</a>
          </li>
        {% endfor %}
        </ul>



- Creating Custom Template Filters

    - Django has a variety of built-in templates that can be used to modify variables in 
        templates.  We can also create custom filters.  Here, we will create a filter that allows
        us to use markdown syntax in our blog posts.


    - First, we install Python markdown:

        $ pip install Markdown==2.6.11


    - Add to the blog_tags file:

        # blog/templatetags/blog_tags.py
        from django.utils.safestring import mark_safe
        import markdown

        @register.filter(name='markdown')
        def markdown_format(text):
            return mark_safe(markdown.markdown(text))


    - Add the template tags module to the post list and detail templates.

        {% load blog_tags %}


    - And we add the filter the the post body in the templates.

        # post/detail.html
        {{ post.body | markdown }}

        # post/list.html
        {{ post.body | markdown | truncatewords_html:30 }}



- Adding a Sitemap

    - Django comes with a sitemap framework, which allows you to generate sitemaps for your site
        dynamically.  A sitemap is an XML file that tells search engines the pages of your website, 
        their relevance, and how frequently they are updated.  It helps crawlers index your website's
        content.


    - The Django sitemap framework depends on 'django.contrib.sites', which allows you to associate
        objects to particular websites that are running with your project. 

        # settings.py
        SITE_ID = 1

        INSTALLED_APPS = [
            # ...
            'django.contrib.sites',
            'django.contrib.sitemaps',
        ]


    - Now, we need to migrate to create the sites tables.

        $ python manage.py migrate


    - Now, we create a new file 'blog/sitemaps.py'.

        # blog/sitemaps.py
        from django.contrib.sitemaps import Sitemap
        from .models import Post

        class PostSitemap(Sitemap):
            changefreq = 'weekly'
            priority = 0.9

            def items(self):
                return Post.published.all()

            def lastmod(self, obj):
                return obj.updated

      By default, Django calls the 'get_absolute_url()' method on each object to retrieve its URL.


    - Finally, we need to add our sitemap url:

        # mysite/urls.py
        from django.contrib.sitemaps.views import sitemap
        from blog.sitemaps import PostSitemap

        sitemaps = {
            'posts': PostSitemap,
        }

        urlpatterns = [
            ... ,
            path('sitemap.xml', 
                 sitemap, 
                 {'sitemaps': sitemaps}, 
                 name='django.contrib.sitemaps.views.sitemap')
        ]



- Creating Feeds for Blog Posts

    - Django has a built-in syndication feed framework that you can use to dynamically generate RSS
        or Atom feeds in a similar manner to creating sitemaps within a site's framework.  A web feed
        is a data format (usually XML) that provides users with frequently updated content.  Users will
        be able to subscribe to your feed using feed aggregator software.


    - First, create a new file, 'blog/feeds.py':

        # blog/feeds.py
        from django.contrib.syndication.views import Feed
        from django.template.defaultfilters import truncatewords
        from .models import Post
        
        class LatestPostsFeed(Feed):
            title = 'My blog'
            link = '/blog/'
            description = 'New posts of my blog.'
        
            def items(self):
                return Post.published.all()[:5]
        
            def item_title(self, item):
                return item.title
        
            def item_description(self, item):
                return truncatewords(item.body, 30)


    - Here, we subclass the 'Feed' class of the syndication framework.  The 'title', 'link', and 
        'description' correspond to the <title>, <link> and <description> RSS elements.


    - We add our feed to 'blog/urls.py':

        # blog/urls.py
        from .feeds import LatestPostsFeed

        urlpatterns = [
            # ...
            path('feed/', LatestPostsFeed(), name='post_feed'),
        ]


    - We can now navigate to the RSS field at 'http://localhost:8000/blog/feed/'.  The final step is to
        add a feed subscription link to the blog's sidebar.  Open the 'blog/base.html' template and add
        the following line under the number of total posts inside the sidebar 'div'.

        # blog/base.html
        # Add below total number of posts
        <p><a href="{% url "blog:post_feed" %}">Subscribe to my RSS feed</a></p>


- Installing PostgreSQL

- Adding Full-Text Search to Blog

    - Simple Search Lookups

    - Searching Against Multiple Fields

- Building a Search View

- Stemming and Ranking Results

- Weighting Queries

- Searching With Trigram Similarity

- Other Full-Text Search Engines

    - We may want to use a full-text search engine other that PostgreSQL.  If you want to use
        'Solr' or 'Elasticsearch', you can you can integrate them into your Django project using 
        Haystack. Haystack is a Django application that works as an abstraction layer for multiple 
        search engines. It offers a simple search API very similar to Django QuerySets. 