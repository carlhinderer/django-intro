--------------------------------------------------------------------
CHAPTER 3 - EXTENDING THE BLOG APPLICATION
--------------------------------------------------------------------

- Creating Custom Template Tags and Filters

    - Django provides these helper functions that allow you to create your own template tags in 
        an easy manner.

        1. 'simple_tag' = Processes the data and returns a string
        2. 'inclusion_tag' = Processes the data and returns a rendered template


    - Create a new directory for blog template tags:

        blog/
          __init__.py
          models.py
          ...
          templatetags/
            __init__.py
            blog_tags.py


    - Now, add the 'blog_tags.py':

        # blog/templatetags/blog_tags.py

        from django import template
        from ..models import Post
        
        register = template.Library()
        
        @register.simple_tag
        def total_posts():
            return Post.published.count()


    - In order to make custom template tags avaiable in templates, we have to load them.

        # templates/blog/base.html

        {% load blog_tags %}
        {% load static %}
        <!DOCTYPE html>
        ...

        # Add this to 'sidebar' section
        <p>This is my blog. I've written {% total_posts %} posts so far.</p>



- Creating an Inclusion Tag

    - Now, we'll create an inclusion tag, which can render a template with context variables
        returned by your template tag.

        # blog_tags.py

        @register.inclusion_tag('blog/post/latest_posts.html')
        def show_latest_posts(count=5):
            latest_posts = Post.published.order_by('-publish')[:count]
            return {'latest_posts': latest_posts}


    - Create a new template to show the latest posts:

        # blog/post/latest_posts.html
        <ul>
          {% for post in latest_posts %}
            <li>
              <a href="{{ post.get_absolute_url }}">{{ post.title }}</a>
            </li>
          {% endfor %}
        </ul>


    - And we can add the list of latest posts to our sidebar in 'base.html'.

        # templates/blog/base.html
        <h3>Latest Posts</h3>
        {% show_latest_posts 3 %}



- Creating a Template Tag with a Stored Result

    - Here, we'll create a tag to display the most commented posts.

        # blog_tags.py

        @register.simple_tag
        def get_most_commented_posts(count=5):
            return Post.published \
                       .annotate(total_comments=Count('comments')) \
                       .order_by('-total_comments')[:count]


      We:
        1. Build a QuerySet using the 'annotate()' function to aggregate the total
             number of comments for each post.

        2. We use the 'Count' aggregation to store the number of comments in the
             computed field in descending order.

        3. We provide a 'count' argument to limit the number of objects returned.


    - We'll add the most commented posts to the sidebar:

        # templates/blog/base.html
        # Add to sidebar

        <h3>Most commented posts</h3>
        {% get_most_commented_posts as most_commented_posts %}
        <ul>
        {% for post in most_commented_posts %}
          <li>
            <a href="{{ post.get_absolute_url }}">{{ post.title }}</a>
          </li>
        {% endfor %}
        </ul>



- 