-----------------------------------------------------------
CHAPTER 2 - DJANGO URLS AND VIEWS
-----------------------------------------------------------

- URL Regular Expressions

    - The precedence rule is that granular urls come first, and broad urls come last.  If more than one
        URL matches the incoming request, the top one will get triggered.

        urlpatterns = [
            url(r'^about/',TemplateView.as_view(template_name='about.html')),
            url(r'^about/index/',TemplateView.as_view(template_name='index.html')),
        ]


    - Using exact patterns (which end with $) instead of wildcard matching, can make the URLs easier to
        reason about in a large application.

        urlpatterns = [
            url(r'^about/$',TemplateView.as_view(template_name='about.html')),
            url(r'^about/index/$',TemplateView.as_view(template_name='index.html')),
        ]


    - Exact patterns can end up causing extra work if you're doing SEO or A/B testing, since you'll need
        to provide an exact match for each URL you use.

        # SEO Example
        /about/the+coffeehouse+in+san+diego

        # A/B Testing Example
        /about/landing/a
        /about/landing/b



- Regex Syntax For URLs

    - Symbols

        ^              Start of URL
        $              End of URL
        \              Escape for interpreted values
        |              Or

        +              1 or more occurrences
        ?              0 or 1 occurrences
        {n}            n occurrences
        {n,m}          Between n and m occurrences

        []             Character grouping
        (?P<name>__)   Capture occurrences that matches regex __ and assign to 'name'
        .              Any character
        \d+            1 or more digits

        \D+            1 or more non-digits
        [a-zA-z0-9_]   1 character that is a letter, number, or underscore
        \w+            1 or more word characters
        [-@\w]+        1 or more word characters, dashes, and ats



    - Examples

        r'^$'                 Empty String
        r'^stores/'           /stores/ with anything after it
        r'^about/contact$'    /about/contact exactly
        r'^stores/\d+/'       /stores/ with any digit

        r'^drinks/mocha|espresso/'    /drinks/mocha or /drinks/espresso with anything after it

        r'^state/[A-Z]{2}/'           /state/ with any 2 uppercase letters after


    - Note that Django URLs do not inspect GET request query strings.



- Passing URL Parameters to Templates

    - Sometimes, we need to pass values from the URL to the view or the template layer.

        urlpatterns = [
            url(r'^drinks/(?P<drink_name>\D+)/',TemplateView.as_view(template_name='drinks/index.html'))
        ]

      In this case, we're sending the value of <drink_name> to the 'drinks/index.html' template.  We can
        refer to it there with

        {{drink_name}}


    - We can also pass parameters to a template by adding a dictionary as a parameter to 'as_view':

        url(r'^drinks/(?P<drink_name>\D+)', 
            TemplateView.as_view(template_name='drinks/index.html'), {'onsale':True})

      Then, we can refer in the template to:

        {{onsale}}



- Passing URL Parameters to Views

    - Here, we capture a URL parameter:

        from coffeehouse.stores import views as stores_views

        urlpatterns = patterns[
            url(r'^stores/(?P<store_id>\d+)/', stores_views.detail)
        ]


    - And we can refer to the <store_id> in the view.  Note that the URL parameter name must match the
        view parameter name.  Also note that any paramter passed from a URL is always a string, regardless
        of its content (ie even if its an integer).

        from django.shortcuts import render

        def detail(request, store_id):
            # We can access store_id now here
            return render(request, 'stores/detail.html')


    - Note that we can make a URL parameter optional by assigning it a default value in the view method.

        # 2 URLs, one where the parameter is passed, and one where it isn't
        urlpatterns = patterns[
            url(r'^stores/',stores_views.detail),
            url(r'^stores/(?P<store_id>\d+)/',stores_views.detail),
        ]

        # View controller method with optional parameter
        def detail(request, store_id='1'):
            return render(request, 'stores/detail.html')


    - We can pass extra paramters to a view in a dictionary as well:

        # Pass the 'location' parameter
        url(r'^stores/',stores_views.detail,{'location':'headquarters'})

        # Must also add 'location' to view parameters
        def detail(request, store_id='1', location=None)