-----------------------------------------------------------
CHAPTER 1 - INTRO TO DJANGO
-----------------------------------------------------------

- Book Contents

    I. Intro

        A. Starting a Django Project
        B. Setting Up The Database
        C. Creating URLs
        D. Creating Templates
        E. Creating Apps
        F. Setting Up Django Admin and Admin Docs


    II. Urls and Views

        A. URL Regular Expressions
        B. Passing URL Parameters to Templates
        C. Passing URL Parameters to Views
        D. Accessing Parameters From the QueryString
        E. URL Consolidation, Modularization, and Namespacing

        F. View Method 'request' Parameter
        G. View Method Responses
        H. Built-in Response Shortcuts
        I. The 'DEBUG' Setting and Error Pages
        J. Built-in View Method Middleware
        K. Middleware Structure and Execution
        L. Middleware Flash Messages
        M. Class-Based Views
        N. Creating Class-Based Views


    III. Django Templates

        A. Django Template Configuration
        B. Creating Reusable Templates
        C. Built-in Context Processors
        D. Custom Context Processors
        E. Built-in Django Filters
        F. Built-in Django Tags
        G. Custom Filters


    IV. Jinja Templates

        A. Jinja Advantages and Disadvantages
        B. What Works Differently
        C. Jinja Template Configuration
        D. Creating Reusable Jinja Templates
        E. Jinja Globals
        F. Jinja Built-in Tags
        G. Custom Filters and Tests
        H. Jinja Extensions and Policies


    V. Application Management

        A. settings.py in Production
        B. Using Multiple Configuration Environments
        C. Setting Up Static Web Page Resources

        D. Django Logging
        E. Creating Log Messages
        F. Customizing Loggers
        G. Logging With Sentry

        H. Django Email Service
        I. Built-in Email Helpers
        J. Customizing Email

        K. Django Shell
        L. Django Debug Toolbar
        M. Django PDB
        N. Django Extensions
        O. Django Management Commands


    VI. Forms

        A. Django Form Structure and Workflow
        B. Functional Template and View Method
        C. CSRF and Django
        D. Django Form Processing
        E. Django Form Field Types
        F. Setting the Layout for Django Forms in Templates
        G. Django Custom Form Fields and Widgets
        H. Partial Forms
        I. AJAX Form Submission
        J. Handling Files in Forms
        K. Django Formsets


    VII. Models

        A. Django Models and the Migrations Workflow
        B. Django Model Data Types
        C. Django Built-in Model Methods
        D. Custom Model Methods
        E. Relationships in Django Models
        F. Options for Relationship Model Data Types
        G. Django Model Transactions
        H. Django Model Migrations
        I. Django Model Database Tasks
        J. Model Initial Data Setup
        K. Django Model Signals
        L. Models Outside of models.py
        M. Django Models and Multiple Databases


    VIII. Model Queries

        A. CRUD Single Records
        B. CRUD Multiple Records
        C. Understanding QuerySet
        D. CRUD Relationships Across Django Models

        E. Model Queries by SQL Keyword
        F. Order Queries
        G. Limit Queries
        H. Merge Queries
        I. Aggregation Queries
        J. Expression and Function Queries
        K. Model Queries with Raw SQL
        L. Model Managers


    IX. Model Forms and Classviews

        A. Django Model Form Structure and Workflow
        B. Creating Model Forms
        C. Model Form Options
        D. Model Forms with Relationships
        E. Model Form Processing
        F. Model Formsets

        G. Class-Based Views with Models
        H. CreateView
        I. ListView and DetailView
        J. UpdateView
        K. DeleteView
        L. Class-Based Views with Mixins


    X. User Management

        A. Creating Users
        B. Managing Users
        C. Creating and Managing Groups

        D. Permission Types
        E. View Method Permission Checks
        F. URL Permission Checks
        G. Template Permission Checks
        H. Class-Based View Permission Checks

        I. User Authentication and Auto-Management
        J. Login and Logout Workflow
        K. Password Change Workflow
        L. Password Reset Workflow
        M. User Signup Workflow

        N. Creating Custom User Model Fields
        O. Custom Authentication Back Ends

        P. User Management with Django allauth
        Q. Social Authentication with Django allauth
        R. Facebook Authentication with Django allauth
        S. Google Authentication with Django allauth
        T. Twitter Authentication with Django allauth


    XI. Admin Management

        A. Setting Up Django Models
        B. CRUD Records
        C. Custom Page Layout, Data, and Behaviors
        D. CRUD Permissions
        E. Multiple Django admin Sites


    XII. REST Services

        A. Standard View Method exposed as a REST Service
        B. Django REST Framework Concepts
        C. Django REST Framework Security



- Django was started in 2003 by Adrian Holovaty and Simon Willison at the 'Journal-World' newspaper
    in Lawrence, KS.  In 2005, they released the first public version of the framework.



- Design Principles

    1. DRY
    2. Explicit is Better Than Implicit
    3. Loosely Coupled Architecture



- Rails vs Django

    Rails has a lot of implicit behavior.  For instance, this example shows request parameters automatically
      being implicitly available to the controller, instance variables automatically being passed from
      controller to the view, and the correct view automatically being inferred from the method name.

      class StoresController < ApplicationController
        def show
          # Automatic access to request parameters
          @store = Store.find(params[:id])
          # Instance variable automatically available in view
          # Automatically uses the 'show' template
        end
      end


    By contast, each of these things must be explicitly declared in Django.

      def detail(request, store_id):
          store = Store.objects.get(id=store_id)
          # Instance variables must be passed explicitly
          # Explicit template must be assigned
          return render(request, 'store/detail.html', {'store': store})



- Starting a Django Project

    - To start a Django project, we use either the 'django-admin' executable or the 'django-admin.py'
        script.  After Django is installed, both of these should be accessible from anywhere in your
        system (since they are installed in '/usr/bin', 'usr/local/bin', etc.).  Both the executable
        and script do the exact same thing.


    - The 'django-admin' offers subcommands used extensively for daily work.  The 'startproject'
        subcommand creates a new project.

        # Create a new project called 'coffeehouse'
        $ django-admin startproject coffeehouse

        # Create a new project called 'sportstats'
        $ django-admin startproject sportstats


    - Here is the project structure for the newly created project:

        > coffeehouse
            - manage.py
            > coffeehouse
                - __init__.py
                - settings.py
                - urls.py
                - wsgi.py


        manage.py
          - Runs specific project tasks
          - Whereas 'django-admin.py' runs system-wide tasks, 'manage.py' runs project-specific tasks

        __init__.py
          - Python file that allows Python packages to be imported from directories where its present

        settings.py
          - Contains the config settings for the Django project

        urls.py
          - Contains URL patterns for the Django project

        wsgi.py
          - Contains WSGI config properties for the Django project
          - WSGI is the recommended approach to deploy Django applications in production


    - It's a best practice to rename the top-level base name so that it doesn't match the project directory,
        to avoid confusion.  We rename the project directory to 'coffeehouse-project'.


    - To start the development web server:

        $ python manage.py runserver

      Then, navigate to:

        http://localhost:8000

      To start the development server on a different port:

        $ python manage.py runserver 8080

      To start the development server on a different address and port:

        $ python manage.py runserver 192.168.0.2:8888



- Database Setup

    - By default, new Django projects are set up to use SQLite.  Instead, we'll configure Postgres.

        # Get the sqlite development libraries
        $ sudo apt-get install libpq-dev

        # Log into postgres
        $ sudo su - postgres
        $ psql

        # Create new database
        > CREATE DATABASE coffeehouse;

        # Create new user account to access the database
        > CREATE USER djangouser WITH PASSWORD 'djangopw';

        # Grant rights on the database to user
        > GRANT ALL PRIVILEGES ON DATABASE coffeehouse TO djangouser;


    - Next, we'll install 'psycopg2' to add the Python Postgres adapter.

        $ pip install psycopg2


    - Next, we edit the 'settings.py' file.

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'coffeehouse',
                'USER': 'djangouser',
                'PASSWORD': 'djangopw',
                'HOST': 'localhost',
                'PORT': '5432'
            }
        }


    - Finally, we run the initial migrations.

        $ python manage.py migrate



- URLs, Templates, and Apps

    - URLs define the entry points for accessing content.  Templates define the end points that give form
        to the final content.  Apps serve as the middleware between urls and templates, altering or 
        adding content from a database or user interactions.


                             User Requests
                                  |
                                  v
                      URLs Layer (Routes Requests)
                           |                |
                           |                v
                  Static   |          Apps Layer (Modify/Enrich Content)  <--->  Database
                  Content  |                |
                           |                |
                           v                v
                        Templates Layer (Structure Content)


    - Note that the Apps layer can be bypassed if no dynamic content is needed.



- Creating URLs

    - First, we'll create a URL to create a custom home page.  The ^$ regex is used to match the home
        page.  

        # urls.py
        from django.conf.urls import url
        from django.contrib import admin
        from django.views.generic import TemplateView

        urlpatters = [
            url(r'^admin/', admin.site.urls),
            url(r'^$', TemplateView.as_view(template_name='homepage.html')),
        ]


    - Since the 'homepage.html' template doesn't exist yet, we will get an error.


    - Note that in Django 2, 'path' is becoming preferred over 'url', which will eventually be
        deprecated.  'path' has simpler, more readable syntax.  'url' is actually an alias for 're_path'.

        # Comparison
        url(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive)
        path('articles/<int:year>/', views.year_archive)


    - To use 'path' for the homepage,

        path('', TemplateView.as_view(template_name='homepage.html'))



- Creating a Template

    - Here, we'll create a simple template.

        # coffeehouse-project/coffeehouse/templates/homepage.html
        <html>
            <body>
                <h4>Home page for Django</h4>
            </body>
        </html>


    - Next, we need to configure a Django project so that it can find the templates in this directory.

        # In settings.py
        BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
        
        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': ['%s/templates/' % (PROJECT_DIR),],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]



- Django Apps

    - Django apps are used to group application functionality.  


    - Django apps are normally contained in subdirectories inside a project.  This approach makes it 
        easier to use Python references and naming conventions.  For instance, if the project is
        'coffeehouse' and the app is 'stores', we can refer to it with 'coffeehouse.stores'.


    - Because apps provide a modular way to group application functionality, it's common for other people
        or groups to distribute Django apps with common functionality.  For example, if you need a 
        forum, you can use one of the open-source Django forum apps.


    - By default, all Django projects are enabled with 6 apps provided by the framework:

        1. django.contrib.admin
        2. django.contrib.auth
        3. django.contrib.contenttypes
        4. django.contrib.sessions
        5. django.contrib.messages
        6. django.contrib.staticfiles

      When we ran the first migration, the database models for these preinstalled apps were created.



- Creating an App

    - Next, we'll create a small Django app.  From the project directory, we execute the command:

        # Create an app named 'about' in the project directory
        $ django-admin startapp about


    - Once the app is created, we see that the 'about' directory contains:

        __init__.py
          - Allows app packages to be imported from other directories

        migrations
          - Directory that contains migrations applied to the app's database definitions

        admin.py
          - File with admin definitions for the app.  
          - These definitions are needed to access model class instances from the Django admin.

        apps.py
          - File with configuration parameters for the app.

        models.py
          - File with model classes for the app.

        tests.py
          - File with test definitions for the app.

        views.py
          - File with view definitions (ie controller methods) for the app.


    - Now, we'll open the 'views.py' file and add:

        # about/views.py
        from django.shortcuts import render

        def contact(request):
            # Content from the request or database is extracted here
            #   and passed to the template for display.
            return render(request, 'about/contact.html')


      The 'contact' method is a controller method with access to a user's web request.  Inside this
        method, you can access content from a web request, (ie IP address, session) using the 
        'request' for reference.  You can also access information from a database here.


    - Because the contact method returns control to a template 'about/contact.html', we'll also need
        to create a subdirectory inside our 'templates' directory called 'about', and create a template
        called 'contact.html'.

        # coffeehouse/templates/about/contact.html


    - Right now, the 'contact' method isn't linked to a URL.  Lets add this url, which gives control to
        the 'contact' controller method.

        # coffeehouse/urls.py
        from coffeehouse.about import views as about_views

        urlpatterns = [
            ... ,
            url(r'^about/', about_views.contact),
        ]


    - Finally, we need to add the 'about' app to the list of installed apps in the 'settings.py':

        # settings.py
        INSTALLED_APPS = [
            ... ,
            'coffeehouse.about'
        ]



- Setting Up the Django Admin Site

    - The Django admin site provides simple CRUD operations for selected database tables.  It is built
        as a Django app.


    - We already have a url for the admin app (the 'admin' url), which was automatically generated.
        Also, we can see that the 'INSTALLED_APPS' in 'settings.py' already includes 'django.contrib.admin',
        which indicates the admin site app is enabled.


    - Now, we'll create a Django superuser (admin) to access the Django admin.  We can use the 
        'createsuperuser' command from 'manage.py' to do this.

        $ python manage.py createsuperuser

        Username: admin
        Email: admin@coffeehouse.com
        Password: SooPer123


    - Note that the password validation rules can be set in the 'AUTH_PASSWORD_VALIDATORS' in
        'settings.py'.


    - Now, we can navigate to the '/admin' path.



- Configuring and Installing the Django Admin Site Docs App

    - The Django admin site also has its own documentation app.  It introspects the source code for
        all installed apps and presents documentation on controller methods and model objects.


    - To install the Django admin site documentation app, we first need to install the 'docutils'
        package.

        $ pip install docutils


    - Now, we can add the path for the admin doc app.  Note that it needs to be before the more
        general 'admin' path.

        path('admin/doc', include('django.contrib.admindocs.urls'))


    - And, we need to add 'django.contrib.admindocs' to the INSTALLED_APPS.

    - Now, to see our documentation, we can navigate to 'http://localhost:8000/admin/doc'.